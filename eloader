#!/usr/bin/python3

import datetime
import time


import astral

import goeapi
import smaxsmt


# XXX make configurable
SOLAR = "192.168.178.155"
GO_E = "192.168.178.109"

# XXX make configurable
CITY = "Berlin"


def get_sunrise_sunset(city, date=None):
    a = astral.Astral()
    city = a[city]
    sun = city.sun(date=date)
    return sun["sunrise"].time(), sun["sunset"].time()


class EloaderController:
    def __init__(self):
        self.smax = smaxsmt.SolarmaxSmt(SOLAR)
        self.goe = goeapi.GoeAPI(GO_E)

    def loop(self):
        while True:
            sleeptime = self.tick()
            # wait a bit
            # empirically anything less than 360s here will mean no more
            # data is sent to maxmonitoring.solarmax.com for unknown reasons
            time.sleep(sleeptime)

    def tick(self):
        smax = self.smax
        goe = self.goe

        current_phases = goe.phases
        current_ampere = goe.ampere
        # XXX: detect car and do nothing if no car(?)
        # XXX3: telegram integration?
        # XXX4: support for 1-3 phases

        # Detect if the the user manually overrode the automatic
        # settings, e.g. to load faster - just do nothing then until
        # the car is disconnected.
        #
        # Note that the check for 6A/1 phase is needed as a heurisitc for
        # when the car is plugged in during the night. Then the charger
        # will immediately start charging with the last setting (6A/1ph)
        # and we won't detect this because the current_ampere will be "None"
        # during the night. This means that one cannot manually override
        # with 6A/1ph but that is a bit of a pointless setting for a manual
        # override anyway.
        car_connected = goe.car_connected
        if (
            not goe.force_pause
            and car_connected
            and (current_ampere != 6 and current_phases != 1)
            and (current_ampere != goe.ampere or current_phases != goe.phases)
        ):
            print(
                "ampere or phases got manually overriden "
                "got {}/{}, expected {}/{}) sleeping until car "
                "disconnects".format(
                    goe.ampere, goe.phases, current_ampere, current_phases
                ),
                flush=True,
            )
            return 5 * 60

        # sleep *long* in the night and ensure that we not accidentally load
        sunrise, sunset = get_sunrise_sunset(CITY)
        now = datetime.datetime.now().time()
        if now > sunset or now < sunrise:
            print("night mode, sleeping for 10min ({})".format(now), flush=True)
            if not goe.force_pause:
                print("evening mode: force pause (wasn't already?)", flush=True)
                goe.force_pause = True
            return 10 * 60

        current_power_charger = goe.power
        try:
            current_solar_power = smax.current_power
        except (smaxsmt.ModbusConnectionError, AttributeError):
            # XXX: deal with the attribute error in the high layers
            #
            # Traceback (most recent call last):
            #  File "/snap/eloader-mvo/56/bin/eloader", line 35, in <module>
            #    current_solar_power = smax.current_power
            #  File "/.../smaxsmt.py", line 62, in current_power
            #    return self._get(reg)
            #  File "/.../smaxsmt.py", line 55, in _get
            #    val = reg.output(mc)
            #  File "/.../smaxsmt.py", line 20, in output
            #    if len(reg.registers) == 1:
            # AttributeError: 'ModbusIOException' object has no attribute 'registers'
            RETRY_WAIT = 60
            print("cannot connect, will retry in {}s".format(RETRY_WAIT), flush=True)
            return RETRY_WAIT
        print(
            "{} solar / charger {} kW".format(
                current_solar_power, current_power_charger / 1000.0
            )
        )
        # XXX: deal with 1->3 phase and vice versa
        next_amp = None
        for amp in [6, 10, 12, 14, 16]:
            pw = 220 * amp * current_phases / 1000.0
            if pw > current_solar_power:
                break
            next_amp = amp
        if current_ampere != next_amp:
            if next_amp is None:
                print("not enough power, forcing pause")
                goe.force_pause = True
            if next_amp is not None:
                if goe.force_pause:
                    print("enough power, un-pause")
                    goe.force_pause = False
                goe.ampere = next_amp
                new_kw = 220 * next_amp * current_phases / 1000.0
                print("switched to {} amp ({} kW)".format(next_amp, new_kw))
            current_ampere = next_amp
        else:
            print("staying at {} amp".format(current_ampere))
        print(flush=True)
        return 360


def main():
    el = EloaderController()
    el.loop()


if __name__ == "__main__":
    main()
