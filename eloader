#!/usr/bin/python3

import datetime
import sys
import time

import goeapi
import smaxsmt

SOLAR = "192.168.178.155"
GO_E = "192.168.178.109"


if __name__ == "__main__":
    smax = smaxsmt.SolarmaxSmt(SOLAR)
    goe = goeapi.GoeAPI(GO_E)

    current_phases = goe.phases
    current_ampere = goe.ampere
    while True:
        # XXX: detect car and do nothing if no car(?)
        # XXX2: detect manual user override (e.g. via app) and do nothing
        # when this happens
        # XXX3: telegram integration?
        # XXX4: support for 1-3 phases

        # sleep *long* in the night
        now = datetime.datetime.now()
        if now.hour >= 20 or now.hour < 6:
            print("night mode, sleeping for 30min ({})".format(now), flush=True)
            time.sleep(30 * 60)

        current_power_charger = goe.power
        try:
            current_solar_power = smax.current_power
        except smaxsmt.ModbusConnectionError:
            RETRY_WAIT = 60
            print("cannot connect, will retry in {}s".format(RETRY_WAIT), flush=True)
            time.sleep(RETRY_WAIT)
            continue
        print(
            "{} solar / charger {} kW".format(
                current_solar_power, current_power_charger / 1000.0
            )
        )
        # XXX: deal with 1->3 phase and vice versa
        next_amp = None
        for amp in [6, 10, 12, 14, 16]:
            pw = 220 * amp * current_phases / 1000.0
            if pw > current_solar_power:
                break
            next_amp = amp
        if current_ampere != next_amp:
            if next_amp is None:
                print("not enough power, forcing pause")
                goe.force_pause = True
            if next_amp is not None:
                if goe.force_pause:
                    print("enough power, un-pause")
                    goe.force_pause = False
                goe.ampere = next_amp
                new_kw = 220 * next_amp * current_phases / 1000.0
                print("switched to {} amp ({} kW)".format(next_amp, new_kw))
            current_ampere = next_amp
        else:
            print("staying at {} amp".format(current_ampere))
        print(flush=True)
        # wait a bit
        # empirically anything less than 360s here will mean no more
        # data is sent to maxmonitoring.solarmax.com for unknown reasons
        time.sleep(360)
